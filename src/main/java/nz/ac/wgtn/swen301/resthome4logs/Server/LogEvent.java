/*
 * Resthome for Logs
 * This is the log service API for ecs.wgtn.ac.nz SWEN301 assignment 3
 *
 * OpenAPI spec version: 1.2.0
 * Contact: jens.dietrich@vuw.ac.nz
 *
 * NOTE: This class is originally auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */


package nz.ac.wgtn.swen301.resthome4logs.Server;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Objects;
import java.util.UUID;

/**
 * LogEvent
 */
@JsonPropertyOrder({"id", "message", "timestamp", "thread", "logger", "level", "errorDetails"})
public class LogEvent {


    @JsonProperty("id")
    private String id;

    @JsonProperty("message")
    private String message = null;

    @JsonProperty("timestamp")
    private String timestamp = null;

    @JsonProperty("thread")
    private String thread = null;

    @JsonProperty("logger")
    private String logger = null;

    @JsonProperty("level")
    @JsonSerialize()
    private LevelEnum level = null;

    @JsonProperty("errorDetails")
    private String errorDetails = null;

    public LogEvent() {}

    /**
     * Instantiates a new Log event. To save the time when generating test LogEvent
     * id and timestamp will be generated.
     *
     *
     * @param message      the message
     * @param thread       the thread
     * @param logger       the logger
     * @param level        the level
     * @param errorDetails the error details
     */
    public LogEvent(String message, String thread, String logger, LevelEnum level, String errorDetails) {
        this.id = UUID.randomUUID().toString();
        this.message = message;
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss");
        this.timestamp = dateFormat.format(new Date());
        this.thread = thread;
        this.logger = logger;
        this.level = level;
        this.errorDetails = errorDetails;
    }

    /**
     * Instantiates a new Log event. The full size constructor.
     *
     * @param id           the id
     * @param message      the message
     * @param timestamp    the timestamp
     * @param thread       the thread
     * @param logger       the logger
     * @param level        the level
     * @param errorDetails the error details
     */
    public LogEvent(String id, String message, String timestamp, String thread, String logger, LevelEnum level, String errorDetails) {
        this.id = id;
        this.message = message;
        this.timestamp = timestamp;
        this.thread = thread;
        this.logger = logger;
        this.level = level;
        this.errorDetails = errorDetails;
    }

    public void setLevel(LevelEnum level) {
        this.level = level;
    }

    /**
     * Get id
     *
     * @return id id
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * Sets id.
     *
     * @param id the id
     */
    public void setId(String id) {
        this.id = id;
    }


    /**
     * Get message
     *
     * @return message message
     */
    @JsonProperty("message")
    public String getMessage() {
        return message;
    }

    /**
     * Sets message.
     *
     * @param message the message
     */
    public void setMessage(String message) {
        this.message = message;
    }


    /**
     * a particular timestamp format will not be enforced / acceptance-tested
     *
     * @return timestamp timestamp
     */
    @JsonProperty("timestamp")
    public String getTimestamp() {
        return timestamp;
    }

    /**
     * Sets timestamp.
     *
     * @param timestamp the timestamp
     */
    public void setTimestamp(String timestamp) {
        this.timestamp = timestamp;
    }

    public LevelEnum getLevel() {
        return level;
    }

    /**
     * Get thread
     *
     * @return thread thread
     */
    @JsonProperty("thread")
    public String getThread() {
        return thread;
    }

    /**
     * Sets thread.
     *
     * @param thread the thread
     */
    public void setThread(String thread) {
        this.thread = thread;
    }

    /**
     * this is the name property of the logger
     *
     * @return logger logger
     */
    @JsonProperty("logger")
    public String getLogger() {
        return logger;
    }

    /**
     * Sets logger.
     *
     * @param logger the logger
     */
    public void setLogger(String logger) {
        this.logger = logger;
    }


    /**
     * Get errorDetails
     *
     * @return errorDetails error details
     */
    @JsonProperty("errorDetails")
    public String getErrorDetails() {
        return errorDetails;
    }

    /**
     * Sets error details.
     *
     * @param errorDetails the error details
     */
    public void setErrorDetails(String errorDetails) {
        this.errorDetails = errorDetails;
    }



    @Override
    public int hashCode() {
        return Objects.hash(id, message, timestamp, thread, logger, level, errorDetails);
    }


    @Override
    public String toString() {
        return "LogEvent{" +
            "id='" + id + '\'' +
            ", message='" + message + '\'' +
            ", timestamp='" + timestamp + '\'' +
            ", thread='" + thread + '\'' +
            ", logger='" + logger + '\'' +
            ", level=" + level +
            ", errorDetails='" + errorDetails + '\'' +
            '}';
    }


}

